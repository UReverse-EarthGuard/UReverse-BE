<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.earth.ureverse.global.mapper.ProductMapper">

    <!-- FINISH 상태 상품 목록 조회 -->
    <select id="getFinishProducts"
            parameterType="com.earth.ureverse.admin.dto.request.ProductSearchRequest"
            resultType="com.earth.ureverse.admin.dto.response.FinishProductResponse">
        SELECT
            p.product_id AS id,
            (
            SELECT pi.url
            FROM product_image pi
            WHERE pi.product_id = p.product_id
            AND ROWNUM = 1
            ) AS image,
            b.name AS brand,
            c.main_name AS categoryMain,
            c.sub_name AS categorySub,
            p.grade AS grade,
            TO_CHAR(p.updated_at, 'YYYY-MM-DD HH24:MI:SS') AS finishDate
        FROM product p
            JOIN brand b ON p.brand_id = b.brand_id
            JOIN category c ON p.category_id = c.category_id
        WHERE p.status = 'FINISH'
            <if test="brand != null and brand != ''">
                AND b.name = #{brand}
            </if>
            <if test="categoryMain != null and categoryMain != ''">
                AND c.main_name = #{categoryMain}
            </if>
            <if test="categorySub != null and categorySub != ''">
                AND c.sub_name = #{categorySub}
            </if>
            <if test="grade != null and grade != ''">
                AND p.grade = #{grade}
            </if>
        ORDER BY p.updated_at DESC
        OFFSET #{pageStart} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>

    <!-- 총 개수 조회(FINISH 상태 상품 목록) -->
    <select id="countFinishProducts"
            parameterType="com.earth.ureverse.admin.dto.request.ProductSearchRequest"
            resultType="long">
        SELECT COUNT(*)
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        WHERE p.status = 'FINISH'
        <if test="brand != null and brand != ''">
            AND b.name = #{brand}
        </if>
        <if test="categoryMain != null and categoryMain != ''">
            AND c.main_name = #{categoryMain}
        </if>
        <if test="categorySub != null and categorySub != ''">
            AND c.sub_name = #{categorySub}
        </if>
        <if test="grade != null and grade != ''">
            AND p.grade = #{grade}
        </if>
    </select>

    <!-- 검수 완료 상품 검색 -->
    <select id="getInspectionCompletedProductsByInspectorAndKeyword"
            resultType="com.earth.ureverse.inspector.dto.response.ProductSearchResultDto">

        SELECT
        p.product_id AS productId,
        b.name AS brandName,
        c.main_name AS categoryMain,
        c.sub_name AS categorySub,
        p.status AS status,
        img.url AS imageUrl,
        TO_CHAR(p.created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt,
        bcc.point AS expectedPoint
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination bcc
        ON p.brand_id = bcc.brand_id
        AND p.category_id = bcc.category_id
        AND bcc.inspector_id = #{inspectorId}
        LEFT JOIN (
        SELECT product_id,
        MIN(url) KEEP (DENSE_RANK FIRST ORDER BY created_at) AS url
        FROM product_image
        GROUP BY product_id
        ) img ON img.product_id = p.product_id
        WHERE p.status IN ('REJECT', 'SECOND_INSPECT', 'DELIVERY_REQUEST', 'DELIVERING', 'FINISH')
        <if test="keyword != null and keyword != ''">
            AND (LOWER(c.main_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(c.sub_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(b.name) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
        ORDER BY p.created_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY

    </select>

    <!-- 검수 미완료 상품 검색 -->
    <select id="getPendingInspectionProductsByInspectorAndKeyword"
            resultType="com.earth.ureverse.inspector.dto.response.ProductSearchResultDto">

        SELECT
        p.product_id AS productId,
        b.name AS brandName,
        c.main_name AS categoryMain,
        c.sub_name AS categorySub,
        p.status AS status,
        img.url AS imageUrl,
        TO_CHAR(p.created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt,
        bcc.point AS expectedPoint
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination bcc
        ON p.brand_id = bcc.brand_id
        AND p.category_id = bcc.category_id
        AND bcc.inspector_id = #{inspectorId}
        LEFT JOIN (
        SELECT product_id,
        MIN(url) KEEP (DENSE_RANK FIRST ORDER BY created_at) AS url
        FROM product_image
        GROUP BY product_id
        ) img ON img.product_id = p.product_id
        WHERE p.status = 'FIRST_INSPECT'
        <if test="keyword != null and keyword != ''">
            AND (LOWER(c.main_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(c.sub_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(b.name) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
        ORDER BY p.created_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY

    </select>

    <!-- 수거(완료전) 상품 목록 조회 (paid_point, updated_at) -->
    <select id="getPickupProducts"
            parameterType="com.earth.ureverse.admin.dto.request.PickupSearchRequest"
            resultType="com.earth.ureverse.admin.dto.response.PickupProductResponse">
        SELECT
            p.product_id AS id,
            (
            SELECT pi.url
            FROM product_image pi
            WHERE pi.product_id = p.product_id
            AND ROWNUM = 1
            ) AS image,
            b.name AS brand,
            c.main_name AS categoryMain,
            c.sub_name AS categorySub,
            p.grade AS grade,
            p.paid_point AS paid_point,
            p.status AS status,
            TO_CHAR(p.updated_at, 'YYYY-MM-DD HH24:MI:SS') AS updatedAt
            FROM product p
            JOIN brand b ON p.brand_id = b.brand_id
            JOIN category c ON p.category_id = c.category_id
        WHERE 1 = 1
            <if test="brand != null and brand != ''">
                AND b.name = #{brand}
            </if>
            <if test="categoryMain != null and categoryMain != ''">
                AND c.main_name = #{categoryMain}
            </if>
            <if test="categorySub != null and categorySub != ''">
                AND c.sub_name = #{categorySub}
            </if>
            <if test="grade != null and grade != ''">
                AND p.grade = #{grade}
            </if>
            <if test="statusList != null and statusList.size() > 0">
                AND p.status IN
                <foreach item="status" collection="statusList" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
        ORDER BY p.updated_at DESC
        OFFSET #{pageStart} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>

    <!-- 총 개수 조회(FINISH 상태 상품 목록) -->
    <select id="countPickupProducts"
            parameterType="com.earth.ureverse.admin.dto.request.PickupSearchRequest"
            resultType="long">
        SELECT COUNT(*)
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        WHERE 1 = 1
            <if test="brand != null and brand != ''">
                AND b.name = #{brand}
            </if>
            <if test="categoryMain != null and categoryMain != ''">
                AND c.main_name = #{categoryMain}
            </if>
            <if test="categorySub != null and categorySub != ''">
                AND c.sub_name = #{categorySub}
            </if>
            <if test="grade != null and grade != ''">
                AND p.grade = #{grade}
            </if>
            <if test="statusList != null and statusList.size() > 0">
                AND p.status IN
                <foreach item="status" collection="statusList" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
    </select>

    <!-- 상품 상세 정보   -->
    <select id="getProductDetail"
            parameterType="long"
            resultType="com.earth.ureverse.admin.dto.response.ProductDetailResponse">
        SELECT
        p.product_id AS id,
        b.name AS brand,
        c.main_name AS categoryMain,
        c.sub_name AS categorySub,
        p.paid_point AS paidPoint,
        bcc.point AS expectPoint,
        u.email AS userEmail,
        p.status AS status,
        TO_CHAR(p.updated_at, 'YYYY-MM-DD') AS updatedAt
        FROM product p
        JOIN users u ON p.user_id = u.user_id
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        LEFT JOIN brand_category_combination bcc ON p.brand_id = bcc.brand_id AND p.category_id = bcc.category_id
        WHERE p.product_id = #{productId}
    </select>

    <!-- AI 검수 결과 상세 정보   -->
    <select id="getAiInspection"
            parameterType="long"
            resultType="com.earth.ureverse.admin.dto.response.InspectionResultResponse">
        SELECT
            u.email AS inspectorEmail,
            DECODE(i.is_torn, 'Y', 1, 0) AS isTorn,
            DECODE(i.has_stain, 'Y', 1, 0) AS hasStain,
            DECODE(i.has_fading, 'Y', 1, 0) AS hasFading,
            DECODE(i.is_stretched, 'Y', 1, 0) AS isStretched,
            i.notes AS note
        FROM inspection i
            JOIN product p ON i.product_id = p.product_id
            LEFT JOIN brand_category_combination bcc
            ON p.brand_id = bcc.brand_id AND p.category_id = bcc.category_id
            LEFT JOIN users u ON bcc.inspector_id = u.user_id
        WHERE i.product_id = #{productId}
            AND i.inspect_method = 'AI'
            FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- 검수자 검수 결과 상세 정보   -->
    <select id="getHumanInspection"
            parameterType="long"
            resultType="com.earth.ureverse.admin.dto.response.InspectionResultResponse">
        SELECT
        u.email AS inspectorEmail,
        DECODE(i.is_torn, 'Y', 1, 0) AS isTorn,
        DECODE(i.has_stain, 'Y', 1, 0) AS hasStain,
        DECODE(i.has_fading, 'Y', 1, 0) AS hasFading,
        DECODE(i.is_stretched, 'Y', 1, 0) AS isStretched,
        i.notes AS note
        FROM inspection i
        JOIN product p ON i.product_id = p.product_id
        LEFT JOIN brand_category_combination bcc
        ON p.brand_id = bcc.brand_id AND p.category_id = bcc.category_id
        LEFT JOIN users u ON bcc.inspector_id = u.user_id
        WHERE i.product_id = #{productId}
        AND i.inspect_method = 'Human'
        FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- 상품 등급 결과 상세 정보   -->
    <select id="getProductGrade"
            parameterType="long"
            resultType="string">
        SELECT grade
        FROM product
        WHERE product_id = #{productId}
    </select>

    <!-- 상품 이미지 목록   -->
    <select id="getProductImages"
            parameterType="long"
            resultType="string">
        SELECT url
        FROM product_image
        WHERE product_id = #{productId}
        ORDER BY image_id
    </select>

    <!-- 상품 상세 응답 매핑 -->
    <resultMap id="ProductInspectionDetailMap" type="com.earth.ureverse.inspector.dto.response.ProductInspectionDetailDto">
        <result property="productId" column="product_id"/>
        <result property="userId" column="user_id"/>
        <result property="brandName" column="brand_name"/>
        <result property="categoryMain" column="category_main"/>
        <result property="categorySub" column="category_sub"/>
        <result property="expectedPoint" column="expected_point"/>

        <association
                property="aiInspection"
                javaType="com.earth.ureverse.inspector.dto.response.InspectionResultDto"
                select="getInspectionResult"
                column="product_id"/>

        <collection property="imageUrls" ofType="string">
            <result column="image_url"/>
        </collection>
    </resultMap>

    <!-- 검수 필요 상품 상세 조회 -->
    <select id="getPendingProductDetail" resultMap="ProductInspectionDetailMap">
        SELECT
        p.product_id,
        p.user_id,
        b.name AS brand_name,
        c.main_name AS category_main,
        c.sub_name AS category_sub,
        combi.point AS expected_point,
        pi.url AS image_url
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination combi
        ON p.brand_id = combi.brand_id AND p.category_id = combi.category_id
        LEFT JOIN product_image pi ON p.product_id = pi.product_id
        WHERE p.product_id = #{productId}
    </select>

    <!-- 검수 결과 조회 (method='AI') -->
    <select id="getInspectionResult" resultMap="InspectionResultMap" parameterType="long">
        SELECT
        result,
        notes,
        inspect_method,
        is_torn,
        has_stain,
        has_fading,
        is_stretched,
        other_defect,
        created_at
        FROM inspection
        WHERE product_id = #{productId}
        AND inspect_method = 'AI'
        FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- 검수 결과 등록 -->
    <insert id="insertInspection">
        INSERT INTO inspection (
        inspection_id, product_id, inspector_id, inspect_method, result, notes,
        is_torn, has_stain, has_fading, is_stretched, other_defect,
        created_at, created_by
        ) VALUES (
        inspection_seq.NEXTVAL,
        #{dto.productId}, #{inspectorId}, 'Human', #{dto.result}, #{dto.notes},
        #{dto.isTorn}, #{dto.hasStain}, #{dto.hasFading},
        #{dto.isStretched}, #{dto.otherDefect},
        SYSDATE, #{inspectorId}
        )
    </insert>

    <!-- 예상 포인트 조회 -->
    <select id="getExpectedPoint" resultType="long">
        SELECT point
        FROM brand_category_combination
        WHERE brand_id = (SELECT brand_id FROM product WHERE product_id = #{productId})
        AND category_id = (SELECT category_id FROM product WHERE product_id = #{productId})
    </select>

    <!-- 검수 후 상품 업데이트 -->
    <update id="updateProductAfterInspection">
        UPDATE product
        SET
        grade = #{grade},
        paid_point = #{paidPoint},
        status = #{status},
        updated_at = SYSDATE,
        updated_by = #{inspectorId}
        WHERE product_id = #{productId}
    </update>

    <!-- AI, HUMAN 검사 결과 DTO 매핑 -->
    <resultMap id="InspectionResultMap" type="com.earth.ureverse.inspector.dto.response.InspectionResultDto">
        <result property="result" column="result"/>
        <result property="notes" column="notes"/>
        <result property="inspectMethod" column="inspect_method"/>
        <result property="isTorn" column="is_torn"/>
        <result property="hasStain" column="has_stain"/>
        <result property="hasFading" column="has_fading"/>
        <result property="isStretched" column="is_stretched"/>
        <result property="otherDefect" column="other_defect"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <!-- 검수 완료 상품 상세 응답 DTO 매핑 -->
    <resultMap id="ProductInspectedDetailMap" type="com.earth.ureverse.inspector.dto.response.ProductInspectedDetailDto">
        <result property="productId" column="product_id"/>
        <result property="brandName" column="brand_name"/>
        <result property="categoryMain" column="category_main"/>
        <result property="categorySub" column="category_sub"/>
        <result property="expectedPoint" column="expected_point"/>
        <result property="paidPoint" column="paid_point"/>
        <result property="inspectedAt" column="human_created_at"/>

        <association property="aiInspection" javaType="com.earth.ureverse.inspector.dto.response.InspectionResultDto"
                     select="getInspectionResult"
                     column="product_id"/>
        <association property="humanInspection" javaType="com.earth.ureverse.inspector.dto.response.InspectionResultDto"
                     select="getHumanInspectionResult"
                     column="product_id"/>
        <collection property="imageUrls" ofType="string">
            <result column="image_url"/>
        </collection>
    </resultMap>

    <!-- Inspected 상세 조회 -->
    <select id="getInspectedProductDetail" resultMap="ProductInspectedDetailMap">
        SELECT
        p.product_id,
        b.name AS brand_name,
        c.main_name AS category_main,
        c.sub_name AS category_sub,
        combi.point AS expected_point,
        p.paid_point,
        TO_CHAR(hi.created_at, 'YYYY-MM-DD HH24:MI:SS') AS human_created_at,
        pi.url AS image_url
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination combi
        ON p.brand_id = combi.brand_id AND p.category_id = combi.category_id
        LEFT JOIN inspection hi
        ON p.product_id = hi.product_id AND hi.inspect_method = 'Human'
        LEFT JOIN product_image pi
        ON p.product_id = pi.product_id
        WHERE p.product_id = #{productId}
        AND hi.inspection_id IS NOT NULL
    </select>

    <!-- 공통 검사 결과 조회 (HUMAN) -->
    <select id="getHumanInspectionResult" resultMap="InspectionResultMap" parameterType="long">
        SELECT *
        FROM inspection
        WHERE product_id = #{productId}
        AND inspect_method = 'Human'
        FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- productId 에 해당하는 상품 존재하는지 확인 -->
    <select id="existsByProductId" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM product
        WHERE product_id = #{productId}
    </select>

    <!-- 상품 상태 조회 -->
    <select id="getProductStatus" resultType="string">
        SELECT status
        FROM product
        WHERE product_id = #{productId}
    </select>

    <!-- 배송 정보   -->
    <select id="getDelivery"
            parameterType="long"
            resultType="com.earth.ureverse.admin.dto.response.DeliveryResponse">
        SELECT
            d.sender_name as senderName,
            d.postal_code as postalCode,
            d.address as address,
            d.phone as senderPhone
        FROM delivery d
        WHERE d.product_id = #{productId}
    </select>

    <!-- 검수 완료 상품 total 수 조회 -->
    <select id="countInspectionCompletedProductsByInspectorAndKeyword" resultType="int">
        SELECT COUNT(*)
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination bcc
        ON p.brand_id = bcc.brand_id
        AND p.category_id = bcc.category_id
        AND bcc.inspector_id = #{inspectorId}
        WHERE p.status IN ('REJECT', 'SECOND_INSPECT', 'DELIVERY_REQUEST', 'DELIVERING', 'FINISH')
        <if test="keyword != null and keyword != ''">
            AND (LOWER(c.main_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(c.sub_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(b.name) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
    </select>

    <!-- 검수 미완료 상품 total 수 조회 -->
    <select id="countPendingInspectionProductsByInspectorAndKeyword" resultType="int">
        SELECT COUNT(*)
        FROM product p
        JOIN brand b ON p.brand_id = b.brand_id
        JOIN category c ON p.category_id = c.category_id
        JOIN brand_category_combination bcc
        ON p.brand_id = bcc.brand_id
        AND p.category_id = bcc.category_id
        AND bcc.inspector_id = #{inspectorId}
        WHERE p.status = 'FIRST_INSPECT'
        <if test="keyword != null and keyword != ''">
            AND (LOWER(c.main_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(c.sub_name) LIKE '%' || LOWER(#{keyword}) || '%'
            OR LOWER(b.name) LIKE '%' || LOWER(#{keyword}) || '%')
        </if>
    </select>

    <!--  상품 상태 변경  -->
    <update id="updateProductStatus">
        UPDATE product
        SET status = #{status},
            updated_at = #{now},
            updated_by = #{updatedBy}
        WHERE product_id = #{productId}
    </update>

    <!-- 수거 요청 대기 건수 (SECOND_INSPECT 상태 상품 수) -->
    <select id="getPickupRequest" resultType="int">
        SELECT COUNT(*)
        FROM product
        WHERE status = 'SECOND_INSPECT'
    </select>

    <!-- 특정 날짜의 지급 포인트 총합 -->
    <select id="getTotalPaidPoint" resultType="long">
        SELECT NVL(SUM(paid_point), 0)
        FROM product
        WHERE status = 'FINISH'
            AND TRUNC(updated_at) = TO_DATE(#{date}, 'YYYY-MM-DD')
    </select>


    <!-- 3. 특정 주간의 인기 브랜드 TOP3 -->
    <select id="getTopBrandsOfWeek" resultType="com.earth.ureverse.admin.dto.response.DashBoardBrandResponse">
        SELECT b.name AS name,
            COUNT(*) AS salesCount
        FROM product p
            JOIN brand b ON p.brand_id = b.brand_id
        WHERE p.status = 'FINISH'
            AND TRUNC(p.updated_at) BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD')
                                        AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
        GROUP BY b.name
        ORDER BY salesCount DESC
        FETCH FIRST 3 ROWS ONLY
    </select>

    <!--검수 결과 통계 (Pass/Fail)-->
    <select id="getInspectionResultRatio" resultType="com.earth.ureverse.admin.dto.response.DashBoardInspectionResultRatioResponse">
        SELECT
            COUNT(*) AS totalCount,
            SUM(CASE WHEN i.result = 'PASS' THEN 1 ELSE 0 END) AS passCount,
            SUM(CASE WHEN i.result = 'FAIL' THEN 1 ELSE 0 END) AS failCount
        FROM inspection i
        WHERE TRUNC(i.created_at) = TO_DATE(#{date}, 'YYYY-MM-DD')
            AND LOWER(i.inspect_method) = LOWER(#{method})
    </select>


    <!--검수 결함유형 통계-->
    <select id="getInspectionDefectRatio" resultType="com.earth.ureverse.admin.dto.response.DashBoardInspectionDefectRatioResponse">
        SELECT
            SUM(CASE WHEN i.is_torn = 'Y' THEN 1 ELSE 0 END) AS tornCount,
            SUM(CASE WHEN i.has_stain = 'Y' THEN 1 ELSE 0 END) AS stainCount,
            SUM(CASE WHEN i.has_fading = 'Y' THEN 1 ELSE 0 END) AS fadingCount,
            SUM(CASE WHEN i.is_stretched = 'Y' THEN 1 ELSE 0 END) AS stretchedCount,
            SUM(CASE WHEN i.other_defect = 'Y' THEN 1 ELSE 0 END) AS otherCount
        FROM inspection i
        WHERE TRUNC(i.created_at) = TO_DATE(#{date}, 'YYYY-MM-DD')
            AND LOWER(i.inspect_method) = LOWER(#{method})
    </select>

    <!-- 일별 수거 건수 집계 -->
    <select id="getFinishStatsByDay" parameterType="int" resultType="com.earth.ureverse.admin.dto.response.DashBoardFinishProductResponse">
        WITH date_range AS (
        SELECT TRUNC(SYSDATE) - (LEVEL - 1) AS day_date
        FROM dual
        CONNECT BY LEVEL &lt;= #{days}
        )
        SELECT
        TO_CHAR(dr.day_date, 'YYYY-MM-DD') AS baseDate,
        NVL(COUNT(p.updated_at), 0) AS finishCount
        FROM date_range dr
        LEFT JOIN product p ON TRUNC(p.updated_at) = dr.day_date AND p.status = 'FINISH'
        GROUP BY dr.day_date
        ORDER BY baseDate ASC
    </select>



    <!-- 월별 수거 건수 집계 -->
    <select id="getFinishStatsByMonth" parameterType="int" resultType="com.earth.ureverse.admin.dto.response.DashBoardFinishProductResponse">
        WITH month_range AS (
        SELECT ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -(LEVEL - 1)) AS month_date
        FROM dual
        CONNECT BY LEVEL &lt;= #{months}
        )
        SELECT
        TO_CHAR(mr.month_date, 'YYYY-MM') AS baseDate,
        NVL(COUNT(p.updated_at), 0) AS finishCount
        FROM month_range mr
        LEFT JOIN product p
        ON TO_CHAR(p.updated_at, 'YYYY-MM') = TO_CHAR(mr.month_date, 'YYYY-MM')
        AND p.status = 'FINISH'
        GROUP BY mr.month_date
        ORDER BY baseDate ASC
    </select>


</mapper>